  
  How to Play: To begin, carefully analyze the question and 
  identify the type of error present in the provided code. 
  This could be a syntax error, logical error, runtime error, 
  or any other issue causing incorrect behavior. Once the 
  error is identified, proceed to fix the highlighted code to 
  resolve the issue. After making the corrections, ensure that 
  the code produces the expected output as specified in the 
  top section of the question.

  Scoring: Scoring is determined by the number of attempts 
  taken on a multiple-choice question and the time required to 
  solve a single problem. Points are deducted for selecting 
  multiple incorrect answers and for taking too long to arrive 
  at the correct solution. The quicker you answer a question 
  correctly, the higher your score will be.


  Compile Time Errors: Errors detected by the compiler before 
  the program runs, usually due to syntax mistakes or type 
  mismatches in the code.

      1. Syntax Errors
          - Missing semicolons (;), braces ({}), or 
            parentheses (()).

          - Example: System.out.println("Hello World"

      2. Class Not Found
          - Trying to use a class that isn’t imported or doesn’t 
            exist in the project.

          - Example: Scanner scanner = new Scanner(System.in); 
            without import java.util.Scanner;.

      3. Type Mismatch
          - Assigning a value of one type to a variable of another 
            incompatible type.

          - Example: int x = "Hello"; (String assigned to an int).


  Runtime Error/Exceptions: Errors that occur while the program 
  is executing, often caused by invalid operations like dividing
  by zero or accessing out-of-bound array elements.

      1. NullPointerException
          - Attempting to access or modify an object that is null.

          - Example: myObject.method(); when myObject is null.

      2. ArrayIndexOutOfBoundsException
          - Trying to access an array element with an index outside its 
            bounds.

          - Example: Accessing array[5] when array has only 5 elements (0-4).

      3. ArithmeticException
          - Performing illegal arithmetic operations, such as dividing by zero.

          - Example: int result = 10 / 0;


  Logic Errors: Mistakes in the program's logic that lead to incorrect output or behavior, even 
  though the code runs without crashes or syntax errors.

      1. Incorrect Operator Usage
          - Using == instead of .equals() to compare strings or objects.

          - Example: if (str == "hello") instead of if (str.equals("hello")).

      2.Off-by-One Errors
          - Common in loops, especially with for or while statements, leading to unintended bounds.

          - Example: for (int i = 0; i <= arr.length; i++) results in an ArrayIndexOutOfBoundsException.

      3.Wrong Conditional Logic
          - Using incorrect conditions in if, while, or for statements.

          - Example: if (x > 10 && x < 5) will always be false.


  Vulnerability: Weaknesses in a system or code that attackers can exploit to gain unauthorized 
  access, cause disruptions, or extract sensitive information.

      1. Logging or Printing Sensitive Information
          -Outputting sensitive data, such as passwords, personal information, or API keys, to logs or 
           console output.

          -Example: System.out.println("Password: " + password);

      2. SQL Injection
          -Using unparameterized SQL queries, which can allow attackers to inject malicious SQL code.

          -Example: String query = "SELECT * FROM users WHERE username = '" + userInput + "'";

      3. Hardcoding Sensitive Data
          -Storing sensitive information (passwords, API keys) directly in source code.

          -Example: String apiKey = "API_SECRET_KEY";
