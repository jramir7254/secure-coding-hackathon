QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Hello, my name is Bob!
EXPECTED_OUTPUT: I am 21 years old.
EXPECTED_OUTPUT: Admin status: false
public class Test {
    public static void main(String[] args) {
        String name;
        int age;
        boolean isAdmin;
        
STOP
        name = Bob

        age = "21";

        isadmin = no:
STOP
        System.out.println("Hello, my name is " + name + "!");
        System.out.println("I am " + age + " years old.");
        System.out.println("Admin status: " + isAdmin);

    }
}

STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: 2 3 4 5 
public class Test {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4};
        addOne(arr);
        printArray(arr);
    }
STOP

    public static void addOne(int[] arr) {
        for (int i = 0; i < arr.length + 1; i++) {
            arr[i] += 1;
        }
    }

STOP
    public static void printArray(int[] a) {
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
    }
}

STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Sum of numbers: 15
public class Test {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        int sum = calculateSum(numbers);
        System.out.println("Sum of numbers: " + sum);
    }

STOP
    public static int calculateSum(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) { 
            sum = nums[i];
        }
        return sum;
    }
STOP

    public static void printArray(int[] a) {
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i] + " ");
        }
    }
}
STOP
QUESTION_TYPE: Vulnerability
EXPECTED_OUTPUT: Stop printing passwords!
import java.util.Random;
public class Test {
    public static void main(String[] args) {
        String name = "Jay";
        String password = getPassword();
        System.out.println("Stop printing passwords!");
    }

STOP
    public static String getPassword() {
        String password = "";
        for (int i = 0; i < 8; i++)
            password += getRandomChar();
        System.out.println(password);
        return password;
    }
STOP

    public static char getRandomChar() {
        Random random = new Random();
        return (char)(random.nextInt((122 - 32) + 1) + 32);
    }
}

STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Hello, my name is Joe!
EXPECTED_OUTPUT: And I am 21 or over.
public class Test {
    public static void main(String[] args) {
        String name = "Joe";
        int age = 21;
        printPerson(name, age);
    }
        
STOP
    public static String isUnder21(int age) {
        if(age < 21) {
            return "under 21";
        else 
            return "21 or over"
    }

STOP
    public static void printPerson(String name, int age) {
        System.out.println("Hello, my name is " + name + "!");
        System.out.println("And I am " + isUnder21(age) + ".");
    }
}

STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Cannot divide by 0!
public class Test {
    public static void main(String[] args) {
        int num1 = 5;
        int num2 = 0;
        processNumbers(num1, num2);
    }

STOP


    public static int divide(int num1, int num2) {
        return num1 / num2;
    }


STOP
    public static void processNumbers(int a, int b) {
        if(divide(a, b) == -1) 
            System.out.println("Cannot divide by 0!");
        else 
            System.out.println("Result is : " + divide(a, b));
    }
}
STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: The total cost of your booking is: $1807.5
EXPECTED_OUTPUT: Thank you for booking with us!
public class Test {
    public static void main(String[] args) {
        double roomPrice = 120.50;
        int rooms = 3, nights = 5;
        double totalCost = calculateTotalCost(roomPrice, nights, rooms);
        printBookingSummary(totalCost);
 }
STOP
    public static double calculateTotalCost(double roomPrice, int nights, int rooms) {
        int costPerRoom = roomPrice * nights; 
        double total = costPerRoom * room; 
        Return total;
    }
STOP

    public static void printBookingSummary(double totalCost) {
        System.out.println("The total cost of your booking is: $" + totalCost);
        System.out.println("Thank you for booking with us!");
    }
}

STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: race car
EXPECTED_OUTPUT: 
EXPECTED_OUTPUT: Reversal complete. Thank you for using the program!
EXPECTED_OUTPUT: Goodbye!

public class BackwardsWord {
    public static void main(String[] args) {
        System.out.println("Please provide a word:");
        String word = "race car".toLowerCase();
        int index = word.length() - 1;

        for (;index >= 0; index--) {
STOP
            char c = word.charAt(i);
            System.out.print(c)); 
STOP
        }
        System.out.println();
        System.out.println("Reversal complete. Thank you for using the program!");
        System.out.println("Goodbye!");
    }
}

STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Your age is 37
EXPECTED_OUTPUT: Expected age calculation result: 37
public class UserAge {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        System.out.println("What year were you born?");
        int birthYear = 1987;
        validateResults(calculateAge(birthYear));
    } 

STOP

    public static int calculateAge(int birthYear { 
        int age = 2024 - birthYear 
        System.out.println("Your age is " + Age); 
        return yearsOld;
    } 

STOP

    public static void validateResults(int birthYear) {
        int expectedAge = 2024 - birthYear;
        System.out.println("Expected age calculation result: " + expectedAge);
    }
}

STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Your age is 24
EXPECTED_OUTPUT: Expected age calculation result: 24
public class UserAge {
    public static void main(String[] args) {
        int birthYear = 2000;
        
        validateResults(calculateAge(birthYear));
    } 
STOP

    public static int calculateAge(int birthYear { 
        int age = 2024 - birthYear 
        System.out.println("Your age is " + Age); 
        return yearsOld;
    } 

STOP
    public static void validateResults(int birthYear) {
        int expectedAge = 2024 - birthYear;
        System.out.println("Expected age calculation result: " + expectedAge);
    }
}

STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Summary: Blue is a popular choice!
EXPECTED_OUTPUT: Summary: Red is vibrant and bold!
EXPECTED_OUTPUT: Summary: That's a unique choice!
public class FavoriteColor {
    public static void main(String[] args) {
        printSummary(checkColor("blue"));
        printSummary(checkColor("red"));
        printSummary(checkColor("barf yellow"));
    }
STOP
    public static String checkColor(String color { 
        if (color.equals("blue")
            return "Blue is a popular choice!")
        else if (color.Equals("red"))
            return "Red is vibrant and bold!";
        else 
            retorn 'That is a unique choice!';
     }
STOP

    public static void printSummary(String summary) {
        System.out.println("Summary: " + summary);
    }
}
STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: Summary: The weekly salary is: $257.556
public class EmployeeSalaryCalculator {
    public static void main(String[] args) {
        double hoursWorked = 40.56;
        double hourlyWage = 6.35;
        printSalary(hoursWorked, hourlyWage);
    }
STOP

    public static void printSalary(hoursWorked, hourlyWage) {
        double salary = calculateSalary(hoursWorked, hourlyWage);
        if(hoursWorked <= 0 || hourlyWage <= 0) {
            System.out.println(Invalid input.); 
        else
            System.out.println("The weekly salary is: $" + Salary);
    }
STOP

    public static double calculateSalary(double hoursWorked, double hourlyWage) {
        double expectedSalary = hoursWorked * hourlyWage;
        return expectedSalary;
    }
}
STOP
QUESTION_TYPE: Compile Time Error
EXPECTED_OUTPUT: The initial total was: $105.0
EXPECTED_OUTPUT: The final total is: $94.5
public class SimpleShoppingCalculator {
    public static void main(String[] args) {
        double price = 100.0;
        double discount = 10.0;
        double tax = 5.0;
        double intitialTotal = 105.00;
    
STOP
        double discountAmt = price * discount \ 100;
        int priceAfterDiscount = price - discountAmt;
        double taxAmt = priceAfterDiscount * fax / 100;
        total = priceAfterDiscount + taxAmt;
        double new Total = priceAfterDiscount + taxAmt;
STOP

        System.out.println("The initial total was: $" + intitialTotal);
        System.out.println("The final total is: $" + newTotal);
    }
}

STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Average: 81.4
EXPECTED_OUTPUT: Thank you for using the Average Calculator.

public class AverageCalculator {
    public static void main(String[] args) {
        int[] numbers = {90, 82, 98, 64, 73};
        int n = numbers.length;
        double sum = 0;
STOP

        for (int i = 0; i <= n; i++) { 
            sum += numbers[i];
        }
        double average = sum / n;
STOP

        System.out.println("Average: " + average);
        System.out.println("Thank you for using the Average Calculator.");
    }
}

STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: The number is odd.
EXPECTED_OUTPUT: 47
EXPECTED_OUTPUT: Thank you for using EvenNumberChecker.

public class EvenNumberChecker {
    public static void main(String[] args) {

        final int number = 7 * 5 + ((8-4) * 3);

STOP
        int result = number % 0;

        if (result == 0) {
            System.out.println("The number is even.");
        } else {
            System.out.println("The number is odd.");
        }

STOP
        System.out.println(number);
        System.out.println("Thank you for using EvenNumberChecker.");

    }
} 



STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Total sum: 75
public class SumArray {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        int sum = sumButBigger(numbers); 
        displayResult(sum);
    }

STOP
    public static int sumButBigger(int[] numbers) {
        int sum = 0;
        for (int i = 0; i <= numbers.length; i++) { 
            sum += numbers[i];
        }
        return sum * 5;
    }
STOP

    public static void displayResult(int result) {
        System.out.println("Total sum: " + result);
    }
} 

STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Price after applying discount: $70.0
public class DiscountCalculator {
    public static void main(String[] args) {
        double originalPrice = 100;
        double finalPrice = calculateDiscount(originalPrice);
        printFinalPrice(finalPrice);
    }

STOP
    public static double calculateDiscount(double price) {
        if(price == 70) {
            return calculateDiscount(price);
        } else {
            return calculateDiscount(price - 10); 
        }
    }

STOP

    public static void printFinalPrice(double price) {

        System.out.println("Price after applying discount: $" + price);
    }
}
STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Last Name: Doe
public class NameSubstring {
    public static void main(String[] args) {
        String name = "John Doe";
        String lastName = getLastName(name, 5);
        printLastName(lastName);
    }
STOP

    public static String getLastName(String name, int start) {
        String returnedLastName = name.substring(start, 9);
        return returnedLastName;
    }

STOP
    public static void printLastName(String lastName) {
        System.out.println("Last Name: " + lastName);
    }
} 
STOP
QUESTION_TYPE: Runtime Error
EXPECTED_OUTPUT: Items counted: 4
public class ItemCounter {
    public static void main(String[] args) {
        String[] items = {"bread", "milk", "A Joe Dirt DVD", "Treasure from a Fish Tank"};
        int itemCount = countItems(items);
        printItemCount(itemCount);
    }
STOP
    public static int countItems(String[] items) {
        items = null;
        int count = 0;
        for (int i = 0; i < items.length; i++) 
            count++;
        return count;
    }
STOP
    public static void printItemCount(int count) {
        System.out.println("Items counted: " + count);
    }
}
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Income: 120000.0, Tax: 30000.0
public class TaxCalculator {
    public static void main(String[] args) {
        double tax = calculateTax(120_000);
        printTaxDetails(120_000, tax);
    }

    public static double calculateTax(double income) {
        double taxRate;
STOP

        if (income > 40_000) {
            taxRate = 0.25;
        } 
        taxRate = 0.15;

        double tax = income * taxRate; //taxRate should be 0.25
STOP
        return tax;
    }

    public static void printTaxDetails(double income, double tax) {
        System.out.println("Income: " + income + ", Tax: " + tax);
    }
}
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Number of vowels: 6
public class VowelCounter {
    public static void main(String[] args) {
        String input = "Hello Creature!";
        int vowelCount = countVowels(input);
        printNumVowels(vowelCount);
    }
STOP
    public static int countVowels(String str) {
        int count = 0;
        for (int i = 0; i < str.length() - 1; i++) { 
            char c = str.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') 
                count++;
STOP
        } return count;
    }

    public static void printNumVowels(int numVowels) {
        System.out.println("Number of vowels: " + numVowels);
    }
} 
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Password contains a number.
EXPECTED_OUTPUT: Password is valid.
public class PasswordValidator {
    public static void main(String[] args) {
        String password = "password123";
        boolean isValid = validatePassword(password);
        printValidationStatus(isValid);
    }

    public static boolean validatePassword(String password) {
STOP
        for (int i = 0; i < password.length(); i++) {
            if (Character.isDigit(password.charAt(i))) {
                System.out.println("Password contains a number.");
                return false;
            }
        }
        return false; 
    }
STOP
    public static void printValidationStatus(boolean status) {
        if (status) {
            System.out.println("Password is valid.");
        } else {
            System.out.println("Password is invalid.");
        }
    }
}
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Access granted.
public class AuthenticationSystem {
    public static void main(String[] args) {
        String userName = "admin";
        String password = "password124";

        printAuthenticationStatus(authenticate(userName, password));
    }
STOP
    public static boolean authenticate(String username, String password) {
        String storedUsername = "admin";
        String storedPassword = "password123";

        if (username == storedUsername || password == storedPassword)
            return true;
        return false;
    }

STOP
    public static void printAuthenticationStatus(boolean status) {
        if (status) {
            System.out.println("Access granted.");
        } else {
            System.out.println("Access denied.");
        }
    }
} 
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: The grade category assigned is: A
public class QuizEvaluator {
    public static void main(String[] args) {
        int score = 92;
        String grade = evaluateGrade(score);
        printGrade(grade);
    }
STOP
    public static String evaluateGrade(int score) {
        if (score >= 90 && score < 80) 
            return "A";
         else if (score >= 70 && score < 90) 
            return "B";
         else if (score >= 50 && score < 70) 
            return "C";
STOP
         else if (score < 50) 
            return "F";
        return "Invalid score";
    }
    public static void printGrade(String grade) {
        System.out.println("The grade category assigned is: " + grade);
    }
} 
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: The total price after tax is: $54.0
public class PriceCalculator {
    public static void main(String[] args) {
        double itemPrice = 50.0;
        double taxRate = 0.08;
        double totalPrice = calculateTotalPrice(itemPrice, taxRate);
        System.out.println("The total price after tax is: $" + totalPrice);
    }
STOP
     public static double calculateTotalPrice(double price, double tax) {
        return price + tax + price; 
    }
STOP
    public static void printTotalPrice(double total) {
        System.out.println("The total price is: $" + total);
    }
}
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: The number is odd.
public class EvenOddChecker {
    public static void main(String[] args) {
        int number = 77;
        boolean isEven = checkIfEven(number);
        printEvenOddStatus(isEven);
    }
STOP
    public static boolean checkIfEven(int number) {
        if (number % 2 == 1) {
            return true;
        } else {
            return false;
        }
    }
STOP
    public static void printEvenOddStatus(boolean status) {
        if (status) {
        System.out.println("The number is even.");
        } else {
        System.out.println("The number is odd.");
        }
    }
} 
STOP
QUESTION_TYPE: Logic Error
EXPECTED_OUTPUT: Thank you for your order! Your total price is: $9.0
public class IceCreamOrder {
    public static void main(String[] args) {
        int scoops = 3;
        String flavor = "Strawberry";
        double totalPrice = calculateTotal(scoops, flavor);
        printReceipt(totalPrice);
    }
 STOP
    public static double calculateTotal(int scoops, String flavor) {
        double pricePerScoop = 3;
        double totalPrice = scoops * pricePerScoop;
        if (flavor == "Chocolate") 
            totalPrice -= 2; // Discount of $2 if Chocolate is selected
        if (flavor != "Vanilla" || flavor != "Chocolate" || flavor != "Strawberry")
            System.out.println("Invalid flavor selected.");
        return totalPrice;
    }
STOP
    public static void printReceipt(double totalPrice) {
        System.out.println("Thank you for your order! Your total price is: $" + totalPrice);
    }
}
STOP
QUESTION_TYPE: Vulnerability
EXPECTED_OUTPUT: Do NOT log sensitive data!
public class SensitiveLogging {
    public static void main(String[] args) {
        String username = "admin";
        String password = "12345";
        logSensitiveData(username, password);
    }
STOP

    public static void logSensitiveData(String username, String password) {
        printImportantReminded();
        System.out.println("Username: " + username + " Password: " + password);
    }

STOP
    public static void printImportantReminded() {
        System.out.println("Do NOT log sensitive data!");
    }
}
STOP
QUESTION_TYPE: Vulnerability
EXPECTED_OUTPUT: API Key: Got From Environment Variable
EXPECTED_OUTPUT: STOP HARDCODING THE API KEY!

public class HardcodedData {
    public static void main(String[] args) {
        String apiKey = getApiKey();
        printDailyLog();
    }

STOP
    public static String getApiKey() {
        String apiKey = "12345API_SECRET_KEY";
        System.out.println("API Key: " + apiKey);
        return apiKey;
    }
STOP

    public static void printDailyLog(String key) {
        System.out.println("STOP HARDCODING THE API KEY");
    }
}

